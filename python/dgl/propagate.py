"""Module for message propagation."""
from __future__ import absolute_import

from . import traversal as trv

__all__ = ['bfs_nodes', 'topological_nodes',
           'dfs_edges', 'dfs_labeled_edges']

def bfs_nodes(graph,
              source,
              reversed=False,
              message_func='default',
              reduce_func='default',
              apply_node_func='default'):
    """Message propagation using node frontiers generated by BFS.

    Paramters
    ---------
    graph : DGLGraph
        The graph object.
    source : list, tensor of nodes
        Source nodes.
    reversed : bool, optional
        If true, traverse following the in-edge direction.
    message_func : callable, optional
        The message function.
    reduce_func : callable, optional
        The reduce function.
    apply_node_func : callable, optional
        The update function.

    See Also
    --------
    dgl.traversal.bfs_nodes_generator
    """
    nodes_gen = trv.bfs_nodes_generator(graph, source, reversed)
    graph.prop_nodes(nodes_gen, message_func, reduce_func, apply_node_func)

def topological_nodes(graph,
                      reversed=False,
                      message_func='default',
                      reduce_func='default',
                      apply_node_func='default'):
    """Message propagation using node frontiers generated by topolocial order.

    Paramters
    ---------
    graph : DGLGraph
        The graph object.
    reversed : bool, optional
        If true, traverse following the in-edge direction.
    message_func : callable, optional
        The message function.
    reduce_func : callable, optional
        The reduce function.
    apply_node_func : callable, optional
        The update function.

    See Also
    --------
    dgl.traversal.topological_nodes_generator
    """
    nodes_gen = trv.topological_nodes_generator(graph, reversed)
    graph.prop_nodes(nodes_gen, message_func, reduce_func, apply_node_func)

def dfs_edges(graph,
              source,
              reversed=False,
              message_func='default',
              reduce_func='default',
              apply_node_func='default'):
    """Message propagation using edge frontiers generated by DFS.

    Paramters
    ---------
    graph : DGLGraph
        The graph object.
    source : list, tensor of nodes
        Source nodes.
    reversed : bool, optional
        If true, traverse following the in-edge direction.
    message_func : callable, optional
        The message function.
    reduce_func : callable, optional
        The reduce function.
    apply_node_func : callable, optional
        The update function.

    See Also
    --------
    dgl.traversal.dfs_edges_generator
    """
    edges_gen = trv.dfs_edges_generator(graph, source, reversed)
    graph.prop_edges(edges_gen, message_func, reduce_func, apply_node_func)

def dfs_labeled_edges(graph,
                      source,
                      reversed=False,
                      has_reverse_edge=False,
                      has_nontree_edge=False,
                      message_func='default',
                      reduce_func='default',
                      apply_node_func='default'):
    """Message propagation using edge frontiers generated by labeled DFS.

    Paramters
    ---------
    graph : DGLGraph
        The graph object.
    source : list, tensor of nodes
        Source nodes.
    reversed : bool, optional
        If true, traverse following the in-edge direction.
    message_func : callable, optional
        The message function.
    reduce_func : callable, optional
        The reduce function.
    apply_node_func : callable, optional
        The update function.

    See Also
    --------
    dgl.traversal.dfs_labeled_edges_generator
    """
    edges_gen = trv.dfs_labeled_edges_generator(
            graph, source, reversed, has_reverse_edges, has_nontree_edge,
            return_labels=False)
    graph.prop_edges(edges_gen, message_func, reduce_func, apply_node_func)
