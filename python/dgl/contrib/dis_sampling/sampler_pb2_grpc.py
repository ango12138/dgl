# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import sampler_pb2 as sampler__pb2


class SamplerStub(object):
  """The sampler service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendSubGraph = channel.unary_unary(
        '/sampler.Sampler/SendSubGraph',
        request_serializer=sampler__pb2.SamplerRequest.SerializeToString,
        response_deserializer=sampler__pb2.SamplerReply.FromString,
        )


class SamplerServicer(object):
  """The sampler service definition.
  """

  def SendSubGraph(self, request, context):
    """Sends sub-graph from sampler to trainer
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SamplerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendSubGraph': grpc.unary_unary_rpc_method_handler(
          servicer.SendSubGraph,
          request_deserializer=sampler__pb2.SamplerRequest.FromString,
          response_serializer=sampler__pb2.SamplerReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'sampler.Sampler', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
